name: Repo Onboarder

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Analysis mode'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - diff
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  onboarder:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml anthropic
    
    - name: Run Repo Onboarder
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        python onboarder.py . --output onboarding
        
        # Check if onboarding directory was created
        if [ ! -d "onboarding" ]; then
          echo "❌ Onboarding directory not created"
          exit 1
        fi
        
        # List contents for debugging
        echo "📁 Onboarding directory contents:"
        ls -la onboarding/
    
    - name: Upload onboarding artifacts
      uses: actions/upload-artifact@v3
      with:
        name: onboarding-docs
        path: onboarding/
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if onboarding directory exists
          const onboardingDir = 'onboarding';
          if (!fs.existsSync(onboardingDir)) {
            console.log('Onboarding directory not found, skipping comment');
            return;
          }
          
          // Read the generated files to get some stats
          let stats = '';
          try {
            const reportPath = path.join(onboardingDir, 'report.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              stats = `\n\n**Analysis Summary:**\n`;
              stats += `- Languages: ${report.stack.languages.join(', ') || 'Not detected'}\n`;
              stats += `- Frameworks: ${report.stack.frameworks.join(', ') || 'Not detected'}\n`;
              stats += `- Entrypoints: ${report.entrypoints.length}\n`;
              stats += `- HTTP Routes: ${report.routes.length}\n`;
              stats += `- External Systems: ${report.systems.nodes.length}\n`;
            }
          } catch (e) {
            console.log('Could not read report.json:', e.message);
          }
          
          const comment = `## 📚 Repository Onboarding Generated
          
          The onboarding documentation has been generated and is available as a build artifact.
          
          **Download the artifact:** Go to the "Artifacts" section below and download "onboarding-docs" to get the complete onboarding bundle including:
          - \`index.html\` - Interactive viewer
          - \`repo_overview.md\` - Markdown overview
          - \`report.json\` - Machine-readable data
          - Mermaid diagrams for structure, routes, and systems
          
          ${stats}
          
          ---
          *Generated by Repo Onboarder*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Repository Onboarding Generated')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
            console.log('Updated existing PR comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            console.log('Created new PR comment');
          }
